{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the SpaceONE developer guides. The documents list in the left navigation teach you how to build SpaceONE. The Achitecture design describes the software architecture of SpaceONE. The Core team developed new Python application framework for micro service architecture. The Console Framework introduces ATOMIC design pattern with Vue.js. The Plugins shows how SpaceONE can easily extend service coverage by developing various plugins. If you want to develop core system, jump into Core development . Start with building from scratch. The Console development section will guide you how to develop web console page. The Plugins development section describes how to develop new plugin. You can easily build and test your own plugin with a few steps. Design Your SpaceONE!","title":"Home"},{"location":"api/","text":"","title":"API References"},{"location":"introduction/","text":"SpaceONE is an open-source Cloud Management Platform that leverages existing multi cloud and on-premise IDCs. Single Sourch of Truth Intent-based Infrastructure Self-Service Open Platform Easy Expansion Enterprise-Level","title":"Introduction"},{"location":"api/getting-started/","text":"Developer Guideline Create new API spec file # Create new API spec file for new micro service. The file location must be proto/spaceone/api/ new service name / version / API spec file For example, the APIs in inventory service is defined at proto \u2514\u2500\u2500 spaceone \u2514\u2500\u2500 api \u251c\u2500\u2500 core \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 handler.proto \u2502 \u251c\u2500\u2500 plugin.proto \u2502 \u251c\u2500\u2500 query.proto \u2502 \u2514\u2500\u2500 server_info.proto \u251c\u2500\u2500 inventory \u2502 \u251c\u2500\u2500 plugin \u2502 \u2502 \u2514\u2500\u2500 collector.proto \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 cloud_service.proto \u2502 \u251c\u2500\u2500 cloud_service_type.proto \u2502 \u251c\u2500\u2500 collector.proto \u2502 \u251c\u2500\u2500 job.proto \u2502 \u251c\u2500\u2500 job_task.proto \u2502 \u251c\u2500\u2500 region.proto \u2502 \u251c\u2500\u2500 server.proto \u2502 \u2514\u2500\u2500 task_item.proto \u2514\u2500\u2500 sample \u2514\u2500\u2500 v1 \u2514\u2500\u2500 helloworld.proto If you create new micro service called sample, create a directory proto/spaceone/api/sample/v1 Define API # After creating API spec file, update gRPC protobuf. The content consists with two sections. + service + messages service defines the RPC method and message defines the request and response data structure. syntax = proto3 ; package spaceone.api.sample.v1; // desc: The greeting service definition. service HelloWorld { // desc: Sends a greeting rpc say_hello (HelloRequest) returns (HelloReply) {} } // desc: The request message containing the user's name. message HelloRequest { // is_required: true string name = 1; } // desc: The response message containing the greetings message HelloReply { string message = 1; } Build API spec to specific language. # Protobuf can not be used directly, it must be translated to target langauge like python or Go. If you create new micro service directory, udpate Makefile Append directory name at TARGET TARGET = core identity repository plugin secret inventory monitoring statistics config report sample Currently API supports python output. make python The generated python output is located at dist/python directory. dist \u2514\u2500\u2500 python \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 spaceone \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 api \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 handler_pb2.py \u2502 \u251c\u2500\u2500 handler_pb2_grpc.py \u2502 \u251c\u2500\u2500 plugin_pb2.py \u2502 \u251c\u2500\u2500 plugin_pb2_grpc.py \u2502 \u251c\u2500\u2500 query_pb2.py \u2502 \u251c\u2500\u2500 query_pb2_grpc.py \u2502 \u251c\u2500\u2500 server_info_pb2.py \u2502 \u2514\u2500\u2500 server_info_pb2_grpc.py \u251c\u2500\u2500 inventory \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 plugin \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 collector_pb2.py \u2502 \u2502 \u2514\u2500\u2500 collector_pb2_grpc.py \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 cloud_service_pb2.py \u2502 \u251c\u2500\u2500 cloud_service_pb2_grpc.py \u2502 \u251c\u2500\u2500 cloud_service_type_pb2.py \u2502 \u251c\u2500\u2500 cloud_service_type_pb2_grpc.py \u2502 \u251c\u2500\u2500 collector_pb2.py \u2502 \u251c\u2500\u2500 collector_pb2_grpc.py \u2502 \u251c\u2500\u2500 job_pb2.py \u2502 \u251c\u2500\u2500 job_pb2_grpc.py \u2502 \u251c\u2500\u2500 job_task_pb2.py \u2502 \u251c\u2500\u2500 job_task_pb2_grpc.py \u2502 \u251c\u2500\u2500 region_pb2.py \u2502 \u251c\u2500\u2500 region_pb2_grpc.py \u2502 \u251c\u2500\u2500 server_pb2.py \u2502 \u251c\u2500\u2500 server_pb2_grpc.py \u2502 \u251c\u2500\u2500 task_item_pb2.py \u2502 \u2514\u2500\u2500 task_item_pb2_grpc.py \u2514\u2500\u2500 sample \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 v1 \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 helloworld_pb2.py \u2514\u2500\u2500 helloworld_pb2_grpc.py","title":"Getting Started"},{"location":"api/getting-started/#create-new-api-spec-file","text":"Create new API spec file for new micro service. The file location must be proto/spaceone/api/ new service name / version / API spec file For example, the APIs in inventory service is defined at proto \u2514\u2500\u2500 spaceone \u2514\u2500\u2500 api \u251c\u2500\u2500 core \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 handler.proto \u2502 \u251c\u2500\u2500 plugin.proto \u2502 \u251c\u2500\u2500 query.proto \u2502 \u2514\u2500\u2500 server_info.proto \u251c\u2500\u2500 inventory \u2502 \u251c\u2500\u2500 plugin \u2502 \u2502 \u2514\u2500\u2500 collector.proto \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 cloud_service.proto \u2502 \u251c\u2500\u2500 cloud_service_type.proto \u2502 \u251c\u2500\u2500 collector.proto \u2502 \u251c\u2500\u2500 job.proto \u2502 \u251c\u2500\u2500 job_task.proto \u2502 \u251c\u2500\u2500 region.proto \u2502 \u251c\u2500\u2500 server.proto \u2502 \u2514\u2500\u2500 task_item.proto \u2514\u2500\u2500 sample \u2514\u2500\u2500 v1 \u2514\u2500\u2500 helloworld.proto If you create new micro service called sample, create a directory proto/spaceone/api/sample/v1","title":"Create new API spec file"},{"location":"api/getting-started/#define-api","text":"After creating API spec file, update gRPC protobuf. The content consists with two sections. + service + messages service defines the RPC method and message defines the request and response data structure. syntax = proto3 ; package spaceone.api.sample.v1; // desc: The greeting service definition. service HelloWorld { // desc: Sends a greeting rpc say_hello (HelloRequest) returns (HelloReply) {} } // desc: The request message containing the user's name. message HelloRequest { // is_required: true string name = 1; } // desc: The response message containing the greetings message HelloReply { string message = 1; }","title":"Define API"},{"location":"api/getting-started/#build-api-spec-to-specific-language","text":"Protobuf can not be used directly, it must be translated to target langauge like python or Go. If you create new micro service directory, udpate Makefile Append directory name at TARGET TARGET = core identity repository plugin secret inventory monitoring statistics config report sample Currently API supports python output. make python The generated python output is located at dist/python directory. dist \u2514\u2500\u2500 python \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 spaceone \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 api \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 handler_pb2.py \u2502 \u251c\u2500\u2500 handler_pb2_grpc.py \u2502 \u251c\u2500\u2500 plugin_pb2.py \u2502 \u251c\u2500\u2500 plugin_pb2_grpc.py \u2502 \u251c\u2500\u2500 query_pb2.py \u2502 \u251c\u2500\u2500 query_pb2_grpc.py \u2502 \u251c\u2500\u2500 server_info_pb2.py \u2502 \u2514\u2500\u2500 server_info_pb2_grpc.py \u251c\u2500\u2500 inventory \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 plugin \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 collector_pb2.py \u2502 \u2502 \u2514\u2500\u2500 collector_pb2_grpc.py \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 cloud_service_pb2.py \u2502 \u251c\u2500\u2500 cloud_service_pb2_grpc.py \u2502 \u251c\u2500\u2500 cloud_service_type_pb2.py \u2502 \u251c\u2500\u2500 cloud_service_type_pb2_grpc.py \u2502 \u251c\u2500\u2500 collector_pb2.py \u2502 \u251c\u2500\u2500 collector_pb2_grpc.py \u2502 \u251c\u2500\u2500 job_pb2.py \u2502 \u251c\u2500\u2500 job_pb2_grpc.py \u2502 \u251c\u2500\u2500 job_task_pb2.py \u2502 \u251c\u2500\u2500 job_task_pb2_grpc.py \u2502 \u251c\u2500\u2500 region_pb2.py \u2502 \u251c\u2500\u2500 region_pb2_grpc.py \u2502 \u251c\u2500\u2500 server_pb2.py \u2502 \u251c\u2500\u2500 server_pb2_grpc.py \u2502 \u251c\u2500\u2500 task_item_pb2.py \u2502 \u2514\u2500\u2500 task_item_pb2_grpc.py \u2514\u2500\u2500 sample \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 v1 \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 helloworld_pb2.py \u2514\u2500\u2500 helloworld_pb2_grpc.py","title":"Build API spec to specific language."},{"location":"architecture/console-framework/","text":"Console Framework # Console is developed with Vue.js and Node.js","title":"Console Framework"},{"location":"architecture/console-framework/#console-framework","text":"Console is developed with Vue.js and Node.js","title":"Console Framework"},{"location":"architecture/msa-framework/","text":"The Core team of SpaceONE has developed new Python application framework focusing on safe, speed, simplicity, and productivity. The application can be easily served as gRPC server, RESTful server, scheduler or worker.","title":"MSA Framework"},{"location":"architecture/plugins/","text":"Plugins Architecture #","title":"Plugins"},{"location":"architecture/plugins/#plugins-architecture","text":"","title":"Plugins Architecture"},{"location":"console/coding-style/","text":"","title":"Coding Style"},{"location":"console/getting-started/","text":"","title":"Getting Started"},{"location":"core/coding-style/","text":"","title":"Coding Style"},{"location":"core/getting-started/","text":"Development workflow 1. Fork in the cloud # Visit https://github.com/spaceone-dev There are lots of repositories. spaceone is top repository. Each micro service has own repository like identity , or inventory . Click 'Fork' button (top right) to establish a cloud-based fork. 2. Clone fork to local storage # Create your clone: git clone https://github.com/$user/spaceone.git cd spaceone 3. Branch # Add upstream: git remote add upstream https://github.com/spaceone-dev/spaceone.git # Never push to upstream master git remote set-url --push upstream no_push # Confirm that your remotes make sense: git remote -v Get your local master up to date: git fetch upstream git checkout master git rebase upstream/master Branch from it: git checkout -b myfeature 5. Commit # Commit your changes. git add changed files git commit -s Likely you go back and edit/build/test some more then 'commit --amend' in a few cycles. 6. Push # When ready to review (or just to establish an offsite backup of your work), push your branch to your fork on github.com : git push -f origin myfeature 7. Create a pull request # Visit your fork at https://github.com/$user/spaceone Click the Crete pull request button","title":"Getting Started"},{"location":"core/getting-started/#1-fork-in-the-cloud","text":"Visit https://github.com/spaceone-dev There are lots of repositories. spaceone is top repository. Each micro service has own repository like identity , or inventory . Click 'Fork' button (top right) to establish a cloud-based fork.","title":"1. Fork in the cloud"},{"location":"core/getting-started/#2-clone-fork-to-local-storage","text":"Create your clone: git clone https://github.com/$user/spaceone.git cd spaceone","title":"2. Clone fork to local storage"},{"location":"core/getting-started/#3-branch","text":"Add upstream: git remote add upstream https://github.com/spaceone-dev/spaceone.git # Never push to upstream master git remote set-url --push upstream no_push # Confirm that your remotes make sense: git remote -v Get your local master up to date: git fetch upstream git checkout master git rebase upstream/master Branch from it: git checkout -b myfeature","title":"3. Branch"},{"location":"core/getting-started/#5-commit","text":"Commit your changes. git add changed files git commit -s Likely you go back and edit/build/test some more then 'commit --amend' in a few cycles.","title":"5. Commit"},{"location":"core/getting-started/#6-push","text":"When ready to review (or just to establish an offsite backup of your work), push your branch to your fork on github.com : git push -f origin myfeature","title":"6. Push"},{"location":"core/getting-started/#7-create-a-pull-request","text":"Visit your fork at https://github.com/$user/spaceone Click the Crete pull request button","title":"7. Create a pull request"},{"location":"plugins/coding-style/","text":"","title":"Coding style"},{"location":"plugins/getting-started/","text":"","title":"Getting Started"}]}